Tokens security
---------------

django-sesame builds authentication tokens as follows:

- Encode the primary key of the user for which they were generated;
- Assemble a revocation key which will be used for invalidating tokens;
- If ``SESAME_MAX_AGE`` is enabled, encode the token generation timestamp;
- Add a message authentication code (MAC) to prevent tampering with the token.

The revocation key is derived from:

- The password of the user, unless ``SESAME_INVALIDATE_ON_PASSWORD_CHANGE`` is
  disabled;
- The last login date of the user, if ``SESAME_ONE_TIME`` is enabled.

Primary keys are in clear text. If this is a concern, you can write a custom
packer to encrypt them. See :ref:`Custom primary keys` for details.

django-sesame provides two token formats:

- v1 is the original format, which still works as designed;
- v2 is a better, cleaner, faster design that produces shorter tokens.

The ``SESAME_TOKENS`` setting lists supported formats in order of decreasing
preference. The first item defines the format of newly created tokens. Other
items define other acceptable formats, if any.

``SESAME_TOKENS`` defaults to ``["sesame.tokens_v2", "sesame.tokens_v1"]``
which means "generate tokens v2, accept tokens v2 and v1".

Tokens v2
.........

Tokens v2 contain a primary key, an optional timestamp, and a signature.

The signature covers the primary key, the optional timestamp, and the
revocation key. If the revocation key changes, the signature becomes invalid.
As a consequence, there's no need to include the revocation key in tokens.

The signature algorithm is Blake2 in keyed mode. A unique key is derived by
hashing the ``SECRET_KEY`` setting and relevant ``SESAME_*`` settings.

By default the signature length is 10 bytes. You can adjust it to any value
between 1 and 64 bytes with the ``SESAME_SIGNATURE_SIZE`` setting.

If you need to invalidate all tokens, set the ``SESAME_KEY`` setting to a new
value. This will change the unique key and, as a consequence, invalidate all
signatures.

Tokens v1
.........

Tokens v1 contain a primary key and a revocation key, plus an optional
timestamp and a signature generated by Django's built-in ``Signer`` or
``TimestampSigner``.

The signature algorithm is HMAC-SHA1.

If you need to invalidate all tokens, you can set the ``SESAME_SALT`` setting
to a new value. This will change all signatures.
